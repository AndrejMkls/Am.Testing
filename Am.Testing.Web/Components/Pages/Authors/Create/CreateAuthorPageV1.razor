@page "/authors/create/v1"

@using Am.Testing.Domain.Entities
@using Am.Testing.Domain.Validations
@using Am.Testing.Web.Components.Account

@inherits BasePage
@attribute [Authorize]
@inject IStringLocalizer<CreateAuthorPageV1> Localizer
@inject MainDbContext DbContext 
@inject IWebHostEnvironment WebEnvironment
@inject IdentityProvider IdentityProvider

<HeadContent>
    <script src="js/ImagePreviews.js"></script>
</HeadContent>

<PageTitle>Autori</PageTitle>

<h3>@Localizer["CreateNewItem"]</h3>

<RadzenCard>

    <RadzenTemplateForm Data="@item" Submit="@(async (Author args) => { await OnSubmit(args); })">

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["FirstName"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenTextBox Name="FirstName" @bind-Value=@item.FirstName class="w-100" />
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["LastName"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenTextBox Name="LastName" @bind-Value=@item.LastName class="w-100" />
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["FullName"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenTextBox @bind-Value=@item.FullName class="w-100" />
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["Biography"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenTextArea @bind-Value=@item.Biography class="w-100" />
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["Nationality"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenTextBox @bind-Value=@item.Nationality class="w-100" />
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["Photo"]" />
            </div>
            <div class="col-xl-6 col-12">
                <InputFile @ref=photoInput accept="image/*" OnChange="OnPhotoUpload" />
                <img @ref="photoPreview" id="imgLayout" height="100" />
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["BirthYear"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenNumeric Name="BirthYear" @bind-Value=@item.BirthYear class="w-100" />
            </div>
        </div>

        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.Large" Icon="save" Text="@Localizer["Save"]" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="@Localizer["Cancel"]" Click="@Cancel" />

        @foreach (var error in errorList)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning">
                @error
            </RadzenAlert>
        }

    </RadzenTemplateForm>

</RadzenCard>

@code {


    private Author item = new();

    private IBrowserFile? photoFile;
    private InputFile? photoInput;
    private ElementReference photoPreview;

    private long maxFileSize = 1024 * 155;

    private List<string> errorList = [];

    private void OnPhotoUpload(InputFileChangeEventArgs args)
    {
        try
        {
            var file = args.File;
            photoFile = file;

            JsRuntime.InvokeVoidAsync("showPreview", photoInput!.Element, photoPreview);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task OnSubmit(Author output)
    {
        output.Photo = await SavePhoto();

        AuthorValidator validator = new();

        var result = validator.Validate(output);

        if (result.IsValid)
        {
            output.CreatedAt = DateTime.UtcNow;
            output.CreatedBy = await IdentityProvider.GetLoggedInUserId(); 

            await DbContext.Authors.AddAsync(output);
            await DbContext.SaveChangesAsync();

            Notifications.Notify(NotificationSeverity.Success, "Uložené");

            Navigations.NavigateTo("/authors/index/v1");
        }
        else
        {
            foreach(var item in result.Errors)
            {
                errorList.Add(item.ErrorMessage);
            }
        }
    }

    void Cancel()
    {
        Navigations.NavigateTo("/authors/index/v1");
    }

    private async Task<string> SavePhoto()
    {
        string fileName = "";

        if (photoFile is not null)
        {
            var trustedFileName = Path.GetRandomFileName();
            var originalExtension = Path.GetExtension(photoFile.Name);

            fileName = $"{trustedFileName}{originalExtension}";

            var path = Path.Combine(WebEnvironment.WebRootPath, "uploads", fileName);

            await using FileStream fs = new(path, FileMode.Create);
            await photoFile.OpenReadStream(maxFileSize).CopyToAsync(fs);
        }

        return fileName;
    }



}
