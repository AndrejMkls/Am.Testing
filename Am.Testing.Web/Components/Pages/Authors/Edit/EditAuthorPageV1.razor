@page "/authors/{AuthorId:long}/v1"

@using Am.Testing.Domain.Entities
@using Am.Testing.Domain.Validations


@inherits BasePage
@inject IStringLocalizer<EditAuthorPageV1> Localizer
@inject MainDbContext DbContext 
@inject IWebHostEnvironment WebEnvironment
@inject IdentityProvider IdentityProvider

<HeadContent>
    <script src="js/ImagePreviews.js"></script>
</HeadContent>

<PageTitle>Autori</PageTitle>

<h3> Edit Author Page </h3>

<RadzenCard>

    @if (item is not null)
    {
        <RadzenTemplateForm Data="@item" Submit="@(async (Author args) => { await OnSubmit(args); })">

            <div class="row mb-1">
                <div class="col-xl-3 col-12">
                    <RadzenLabel Text="@Localizer["FirstName"]" />
                </div>
                <div class="col-xl-6 col-12">
                    <RadzenTextBox @bind-Value=@item.FirstName class="w-100" />
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-xl-3 col-12">
                    <RadzenLabel Text="@Localizer["LastName"]" />
                </div>
                <div class="col-xl-6 col-12">
                    <RadzenTextBox @bind-Value=@item.LastName class="w-100" />
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-xl-3 col-12">
                    <RadzenLabel Text="@Localizer["FullName"]" />
                </div>
                <div class="col-xl-6 col-12">
                    <RadzenTextBox @bind-Value=@item.FullName class="w-100" />
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-xl-3 col-12">
                    <RadzenLabel Text="@Localizer["Biography"]" />
                </div>
                <div class="col-xl-6 col-12">
                    <RadzenTextArea @bind-Value=@item.Biography class="w-100" />
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-xl-3 col-12">
                    <RadzenLabel Text="@Localizer["Nationality"]" />
                </div>
                <div class="col-xl-6 col-12">
                    <RadzenTextBox @bind-Value=@item.Nationality class="w-100" />
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-xl-3 col-12">
                    <RadzenLabel Text="@Localizer["Photo"]" />
                </div>
                <div class="col-xl-6 col-12">                   
                    <img @ref="photoPreview" src="@($"/uploads/{item.Photo}")" id="imgLayout" height="100" />
                    <InputFile @ref=photoInput accept="image/*" OnChange="OnPhotoUpload" />
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-xl-3 col-12">
                    <RadzenLabel Text="@Localizer["BirthYear"]" />
                </div>
                <div class="col-xl-6 col-12">
                    <RadzenNumeric @bind-Value=@item.BirthYear class="w-100" />
                </div>
            </div>

            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="@Localizer["Save"]" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="@Localizer["Cancel"]" Click="@Cancel" />

            @foreach (var error in errorList)
            {
                <RadzenAlert AlertStyle="AlertStyle.Warning">
                    @error
                </RadzenAlert>
            }

        </RadzenTemplateForm>
    }
    

</RadzenCard>

@code {

    [Parameter]
    public long AuthorId { get; set; }

    private Author? item; 

    private IBrowserFile? photoFile;
    private InputFile? photoInput;
    private ElementReference photoPreview;

    private long maxFileSize = 1024 * 155;

    private List<string> errorList = [];

    protected override async Task OnInitializedAsync()
    {
        var found = await DbContext.Authors.FirstOrDefaultAsync(x => x.Id == AuthorId);

        if (found is not null)
        {
            item = found; 
        }

    }

    private void OnPhotoUpload(InputFileChangeEventArgs args)
    {
        try
        {
            var file = args.File;
            photoFile = file;

            JsRuntime.InvokeVoidAsync("showPreview", photoInput!.Element, photoPreview);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task OnSubmit(Author output)
    {
        var newPhoto = await SavePhoto();

        if (newPhoto != string.Empty)
        {
            output.Photo = newPhoto;
        }

        AuthorValidator validator = new AuthorValidator();

        var result = validator.Validate(output);

        if (result.IsValid)
        {
            var user = await IdentityProvider.GetLoggedInUserId();

            await DbContext.Authors.Where(x => x.Id == output.Id)
                                   .ExecuteUpdateAsync(s => s.SetProperty(p => p.FullName, output.FullName)
                                                             .SetProperty(p => p.FirstName, output.FirstName)
                                                             .SetProperty(p => p.LastName, output.LastName)
                                                             .SetProperty(p => p.Biography, output.Biography)
                                                             .SetProperty(p => p.Nationality, output.Nationality)
                                                             .SetProperty(p => p.Photo, output.Photo)
                                                             .SetProperty(p => p.BirthYear, output.BirthYear)
                                                             .SetProperty(p => p.UpdatedAt, DateTime.UtcNow)
                                                             .SetProperty(p => p.UpdatedBy, user)
                                   );
                                                             
            await DbContext.SaveChangesAsync();

            Notifications.Notify(NotificationSeverity.Success, "Uložené");

            Navigations.NavigateTo("/authors/index/v1");
        }
        else
        {
            foreach(var item in result.Errors)
            {
                errorList.Add(item.ErrorMessage);
            }
        }

        
    }

    void Cancel()
    {
        Navigations.NavigateTo("/authors/index/v1");
    }

    private async Task<string> SavePhoto()
    {
        string fileName = "";

        if (photoFile is not null)
        {
            var trustedFileName = Path.GetRandomFileName();
            var originalExtension = Path.GetExtension(photoFile.Name);

            fileName = $"{trustedFileName}{originalExtension}";

            var path = Path.Combine(WebEnvironment.WebRootPath, "uploads", fileName);

            await using FileStream fs = new(path, FileMode.Create);
            await photoFile.OpenReadStream(maxFileSize).CopyToAsync(fs);
        }

        return fileName;
    }
}
