@page "/settings/enumerations/genres/index"

@using Am.Testing.Domain.Entities

@inherits BasePage
@inject MainDbContext DbContext
@inject IStringLocalizer<GenresIndex> Localizer

<h3>@Localizer["Title"]</h3>

<RadzenDataGrid @ref=grid TItem="Genre" Data="@items"
                AllowSorting=true AllowFiltering=true FilterMode="FilterMode.Simple" AllowPaging=true PageSize="10"
                Density="Density.Default">

    <EmptyTemplate>

    </EmptyTemplate>

    <Columns>

        <RadzenDataGridColumn TItem="Genre" Property="Name" Title="Názov">
            <EditTemplate>
                <RadzenTextBox @bind-Value=context.Name />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Genre" Filterable="false" Sortable="false">

            <Template>

                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                              Click="@(args => EditRow(context))" @onclick:stopPropagation="true">
                </RadzenButton>

                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1"
                              Click="@(args => DeleteRow(context))" @onclick:stopPropagation="true">
                </RadzenButton>

            </Template>

            <EditTemplate>
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium"
                              Click="@((args) => SaveRow(context))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1"
                              Click="@((args) => CancelEdit(context))">
                </RadzenButton>
            </EditTemplate>

        </RadzenDataGridColumn>


    </Columns>

</RadzenDataGrid>


@code {

    private RadzenDataGrid<Genre>? grid;
    IEnumerable<Genre> items = Enumerable.Empty<Genre>();
    private Genre? itemToUpdate;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var list = await DbContext.Genres.ToListAsync();

        if (list.Any())
        {
            items = list;
        }
    }

    void Reset()
    {
        itemToUpdate = null;
    }

    async Task EditRow(Genre item)
    {
        itemToUpdate = (Genre)item.Clone();
        if (grid is not null)
        {
            await grid.EditRow(item);
        }
    }

    private async Task DeleteRow(Genre item)
    {
        var confirmed = await Dialogs.Confirm(message: $"Naozaj chcete vymazať položku?",
                                                title: "Vymazať",
                                                new ConfirmOptions() { CancelButtonText = "Nie", OkButtonText = "Áno", CloseDialogOnEsc = true });

        if (confirmed == true)
        {
            try
            {
                loading = true;

                var result = DbContext.Genres.Remove(item);
                await DbContext.SaveChangesAsync();
            }
            catch (Exception)
            {
                Notifications.Notify(NotificationSeverity.Error, "Porucha", "Nebolo možné vymazať položku.");
            }
            finally
            {
                loading = false;
            }
        }
    }

    private async Task OnUpdateRow(Genre item)
    {
        try
        {
            var result = DbContext.Update(item);
            await DbContext.SaveChangesAsync();
        }
        catch (Exception)
        {
            Notifications.Notify(NotificationSeverity.Error, "Porucha", "Nebolo možné aktualizovať položku.");
        }

    }

    private async Task SaveRow(Genre item)
    {
        if (grid is not null)
            await grid.UpdateRow(item);
    }

    private void CancelEdit(Genre item)
    {
        if (itemToUpdate is not null)
        {
            Reset();

            if (grid is not null)
                grid.CancelEditRow(item);
        }
    }


}
