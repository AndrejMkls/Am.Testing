@page "/publishers/{PublisherId:long}/v1"

@using Am.Testing.Domain.Entities

@inherits BasePage
@inject IStringLocalizer<EditPublisherPageV1> Localizer
@inject MainDbContext DbContext
@inject IdentityProvider IdentityProvider

<PageTitle>Vydavateľstvá</PageTitle>

<h3>@Localizer["CreateNewItem"]</h3>

<RadzenCard>

    <RadzenTemplateForm Data="@item" Submit="@(async (Publisher args) => { await OnSubmit(args); })">

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["Name"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenTextBox @bind-Value=@item.Name class="w-100" />
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["Email"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenTextBox Name="Email" @bind-Value=@item.Email class="w-100" />
                <RadzenEmailValidator Component="Email" Text="Provide a valid email address" Popup=@popup Style="position: absolute" />
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["PhoneNumber"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenTextBox @bind-Value=@item.PhoneNumber class="w-100" />
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["Website"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenTextArea @bind-Value=@item.Website class="w-100" />
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["PublisherType"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenTextBox @bind-Value=@item.PublisherType class="w-100" />
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["YearFounded"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenNumeric @bind-Value=@item.YearFounded class="w-100" />
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-xl-3 col-12">
                <RadzenLabel Text="@Localizer["Notes"]" />
            </div>
            <div class="col-xl-6 col-12">
                <RadzenTextArea @bind-Value=@item.Notes class="w-100" />
            </div>
        </div>

        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.Large" Icon="save" Text="Save" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" Click="@Cancel" />

        @foreach (var error in errorList)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning">
                @error
            </RadzenAlert>
        }

    </RadzenTemplateForm>

</RadzenCard>

@code {

    [Parameter]
    public long PublisherId { get; set; }

    private Publisher item = new();

    private List<string> errorList = [];

    protected override async Task OnInitializedAsync()
    {
        var found = await DbContext.Publishers.FirstOrDefaultAsync(x => x.Id == PublisherId);

        if (found is not null)
        {
            item = found;
        }

    }

    private async Task OnSubmit(Publisher output)
    {
        PublisherValidator validator = new();

        var result = validator.Validate(output);

        if (result.IsValid)
        {
            var user = await IdentityProvider.GetLoggedInUserId();

            await DbContext.Publishers.Where(x => x.Id == output.Id)
                                      .ExecuteUpdateAsync(s => s.SetProperty(p => p.Name, output.Name)
                                                                .SetProperty(p => p.Email, output.Email)
                                                                .SetProperty(p => p.PhoneNumber, output.PhoneNumber)
                                                                .SetProperty(p => p.Website, output.Website)
                                                                .SetProperty(p => p.PublisherType, output.PublisherType)
                                                                .SetProperty(p => p.YearFounded, output.YearFounded)
                                                                .SetProperty(p => p.Notes, output.Notes)
                                                                .SetProperty(p => p.UpdatedAt, DateTime.UtcNow)
                                                                .SetProperty(p => p.UpdatedBy, user)
                                       );

            await DbContext.SaveChangesAsync();

            Notifications.Notify(NotificationSeverity.Success, "Uložené");

            Navigations.NavigateTo("/publishers/index/v1");
        }
        else
        {
            foreach (var item in result.Errors)
            {
                errorList.Add(item.ErrorMessage);
            }
        }


    }

    void Cancel()
    {
        Navigations.NavigateTo("/publishers/index/v1");
    }
}
